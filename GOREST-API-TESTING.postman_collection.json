{
	"info": {
		"_postman_id": "8e59e520-c180-4fe5-8298-aa84d242144c",
		"name": "GOREST-API-TESTING",
		"description": "This project approaches the API REST testing of the endpoints collection stored in [https://gorest.co.in/](https://gorest.co.in/)\n\nSince we do no have a detailed documentation about some matters regarding the behavior of this API, this will be covered also in the content of this repository through exploration and experimentation.\n\nThis will matter for the creation of the Test Strategy.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17994175"
	},
	"item": [
		{
			"name": "GET requests",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each user in the response has an id, name, email, gender, and status\", function () {\r",
									"\tconst responseData = pm.response.json();\r",
									"    \t\t\t\t\t\t\t\r",
									"    responseData.forEach(function (user) {\r",
									"        pm.expect(user).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(user).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('email').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('gender').that.is.a('string').and.satisfy(function (gender) {\r",
									"            return gender === 'female' || gender === 'male';\r",
									"        });\r",
									"        pm.expect(user).to.have.property('status').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (user) {\r",
									"        pm.expect(user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Name contains only allowed characters\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (user) {\r",
									"        pm.expect(user.name).to.match(/^[A-Za-z\\s]+$/, \"Name contains letters with no symbols and spaces \");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var userIds = jsonData.map(user => user.id);\r",
									"pm.environment.set(\"userIds\", JSON.stringify(userIds));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"\r",
									"    responseData.forEach(function (user) {\r",
									"        pm.expect(user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/, \"Email is in a valid format\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/users?email=Grover.Emmerich@yahoo.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "email",
									"value": "Grover.Emmerich@yahoo.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Gender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/users?gender=female",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "gender",
									"value": "female"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/users?status=inactive",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "status",
									"value": "inactive"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the response array has a valid name field\", function () {\r",
									"    pm.response.json().forEach(function (user) {\r",
									"        pm.expect(user.name).to.match(/^[a-zA-Z]+$/);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/users?name=Atmanand",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "name",
									"value": "Atmanand"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"\r",
									"    responseData.forEach(function (element) {\r",
									"        pm.expect(element).to.have.property('id');\r",
									"        pm.expect(element).to.have.property('user_id');\r",
									"        pm.expect(element).to.have.property('title');\r",
									"        pm.expect(element).to.have.property('body');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"id and user_id are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"\r",
									"    responseData.forEach(function (post) {\r",
									"        pm.expect(post.id).to.be.a('number');\r",
									"        pm.expect(post.id).to.be.greaterThan(-1, \"id should be non-negative\");\r",
									"\r",
									"        pm.expect(post.user_id).to.be.a('number');\r",
									"        pm.expect(post.user_id).to.be.greaterThan(-1, \"user_id should be non-negative\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Title and body are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"        pm.expect(item.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var postIds = jsonData.map(post => post.id);\r",
									"pm.environment.set(\"postIds\", JSON.stringify(postIds));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Each comment has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (comment) {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('post_id');\r",
									"        pm.expect(comment).to.have.property('name');\r",
									"        pm.expect(comment).to.have.property('email');\r",
									"        pm.expect(comment).to.have.property('body');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (comment) {\r",
									"        pm.expect(comment.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var commentIds = jsonData.map(comment => comment.id);\r",
									"pm.environment.set(\"commentIds\", JSON.stringify(commentIds));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get To-dos List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"user_id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item.user_id).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Status field is 'pending' or 'completed'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item.status).to.be.oneOf(['pending', 'completed']);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var todoIds = jsonData.map(todo => todo.id);\r",
									"pm.environment.set(\"todoIds\", JSON.stringify(todoIds));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET requests By IDs",
			"item": [
				{
					"name": "Search User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/users/5131601",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"5131601"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User By non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check message response 404\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.message).to.equal(\"Resource not found\", \"Incorrect error message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/users/567",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"567"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Posts By ID (post id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/66741",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"66741"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post Comments By ID (comment id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.post_id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.body).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Name and body are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"    pm.expect(responseData.body).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/55165",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"55165"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get To-do By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200  OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/todos/26365",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"26365"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get To-do By non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404 Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check message response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.message).to.equal(\"Resource not found\", \"Incorrect error message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/todos/55165",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"55165"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST requests",
			"item": [
				{
					"name": "Create  New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains id, name, email, gender, and status\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('email').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('gender').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('status').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Id is a number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (typeof jsonData.id == 'number') {\r",
									"        pm.expect(pm.response.code).to.equal(201);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Email has a valid email format\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Gender is 'male' or 'female'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.gender === 'male' || jsonData.gender === 'female') {\r",
									"        pm.expect(pm.response.code).to.equal(201);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'active' or 'inactive' \", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.status === 'active' || jsonData.status === 'inactive') {\r",
									"        pm.expect(pm.response.code).to.equal(201);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Name field only contains letters\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (typeof jsonData.name === 'string' && /^[a-zA-Z]+$/.test(jsonData.name)) {\r",
									"        pm.expect(pm.response.code).to.equal(201);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\":\"{{$randomFullName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"gender\": \"female\",\r\n        \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Create fails\", function () {\r",
									"    pm.response.to.not.have.success;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"body\": \"{{$randomLoremText}}\"   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/5114907/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"5114907",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"body\": \"{{$randomLoremText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/66972/comments/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"66972",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New User To-Do",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Resource created successfully\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{      \r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"due_on\": \"{{$randomDateFuture}}\",\r\n    \"status\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/5114907/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"5114907",
								"todos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT/PATCH requests",
			"item": [
				{
					"name": "Update User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK, the resource was modified\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var userIds = JSON.parse(pm.environment.get(\"userIds\"));\r",
									"pm.request.url.path[1] = userIds[pm.info.iteration];"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n        \"name\": \"{{$randomFullName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"gender\": \"male\",\r\n        \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userIds}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userIds}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var postIds = JSON.parse(pm.environment.get(\"postIds\"));\r",
									"pm.request.url.path[1] = postIds[pm.info.iteration];"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{     \r\n    \"title\": \"{{$randomJobTitle}}\"    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/{{postIds}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"{{postIds}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE requests",
			"item": [
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var userIds = JSON.parse(pm.environment.get(\"userIds\"));\r",
									"pm.request.url.path[1] = userIds[pm.info.iteration];\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{userIds}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userIds}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Inexistent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/4881238",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"4881238"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var postIds = JSON.parse(pm.environment.get(\"postIds\"));\r",
									"pm.request.url.path[1] = postIds[pm.info.iteration];\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/{{postIds}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"{{postIds}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var commentIds = JSON.parse(pm.environment.get(\"commentIds\"));\r",
									"pm.request.url.path[1] = commentIds[pm.info.iteration];"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/{{commentIds}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{commentIds}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User To-do",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var todoIds = JSON.parse(pm.environment.get(\"todoIds\"));\r",
									"pm.request.url.path[1] = todoIds[pm.info.iteration];"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/todos/{{todoIds}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"{{todoIds}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://gorest.co.in/public/v2",
			"type": "string",
			"disabled": true
		}
	]
}